// Generated by CoffeeScript 1.6.3
(function() {
  var PhysicsString, interval;

  importScripts('/js/ammo.fast.js');

  this.ping = 0;

  this.string_height = 0.4;

  PhysicsString = (function() {
    function PhysicsString(length, thickness, segments, start, end, world) {
      var base, body, c, colShape, endMotionState, endRigidBodyCI, endTransform, fixShape, i, localInertia, mass, motionState, pp, pq, rbInfo, seglength, startMotionState, startRigidBodyCI, startTransform, _i, _j, _ref, _ref1;
      seglength = length / segments;
      this.children = [];
      this.length = length;
      for (i = _i = 0, _ref = segments - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        colShape = new Ammo.btCylinderShape(new Ammo.btVector3(thickness / 2, seglength, thickness / 2));
        mass = 1.0;
        localInertia = new Ammo.btVector3(0, 0, 0);
        colShape.calculateLocalInertia(mass, localInertia);
        base = 5.0;
        motionState = new Ammo.btDefaultMotionState(new Ammo.btTransform(new Ammo.btQuaternion(0, 0, 0, 1), new Ammo.btVector3(0, base + seglength * i, 0)));
        rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, colShape, localInertia);
        body = new Ammo.btRigidBody(rbInfo);
        body.setDamping(0.99, 0.99);
        this.children.push(body);
        body.setActivationState(4);
        world.addRigidBody(body);
      }
      for (i = _j = 0, _ref1 = segments - 2; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        pp = new Ammo.btVector3(0, 0, 0);
        pq = new Ammo.btVector3(0, -seglength, 0);
        c = new Ammo.btPoint2PointConstraint(this.children[i], this.children[i + 1], pp, pq);
        world.addConstraint(c, true);
      }
      fixShape = new Ammo.btBoxShape(new Ammo.btVector3(0.1, 0.1, 0.1));
      startTransform = new Ammo.btTransform();
      startTransform.setIdentity();
      startTransform.setOrigin(new Ammo.btVector3(start.x, start.y, start.z));
      startMotionState = new Ammo.btDefaultMotionState(startTransform);
      startRigidBodyCI = new Ammo.btRigidBodyConstructionInfo(0, startMotionState, fixShape, new Ammo.btVector3(0, 0, 0));
      this.start = new Ammo.btRigidBody(startRigidBodyCI);
      this.start.setCollisionFlags(this.start.getCollisionFlags() | 2);
      this.start.setActivationState(Ammo.DISABLE_DEACTIVATION);
      pp = new Ammo.btVector3(0, seglength / 2, 0);
      pq = new Ammo.btVector3(0, -0.1, 0);
      c = new Ammo.btPoint2PointConstraint(this.children[segments - 1], this.start, pp, pq);
      world.addConstraint(c, true);
      world.addRigidBody(this.start);
      endTransform = new Ammo.btTransform();
      endTransform.setIdentity();
      endTransform.setOrigin(new Ammo.btVector3(end.x, end.y, end.z));
      endMotionState = new Ammo.btDefaultMotionState(endTransform);
      endRigidBodyCI = new Ammo.btRigidBodyConstructionInfo(0, endMotionState, fixShape, new Ammo.btVector3(0, 0, 0));
      this.end = new Ammo.btRigidBody(endRigidBodyCI);
      this.end.setCollisionFlags(this.end.getCollisionFlags() | 2);
      this.end.setActivationState(Ammo.DISABLE_DEACTIVATION);
      postMessage({
        cmd: "ping",
        data: this.end.isKinematicObject()
      });
      pp = new Ammo.btVector3(0, seglength / 2, 0);
      pq = new Ammo.btVector3(0, -0.1, 0);
      c = new Ammo.btPoint2PointConstraint(this.children[0], this.end, pp, pq);
      world.addConstraint(c, true);
      world.addRigidBody(this.end);
    }

    PhysicsString.prototype.update = function() {
      var list, obj, segment, trans, _i, _len, _ref;
      trans = new Ammo.btTransform();
      list = [];
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        segment = _ref[_i];
        obj = {};
        segment.getMotionState().getWorldTransform(trans);
        obj.rax = trans.getRotation().getAxis().x();
        obj.ray = trans.getRotation().getAxis().y();
        obj.raz = trans.getRotation().getAxis().z();
        obj.ra = trans.getRotation().getAngle();
        obj.x = trans.getOrigin().getX();
        obj.y = trans.getOrigin().getY();
        obj.z = trans.getOrigin().getZ();
        list.push(obj);
      }
      return list;
    };

    return PhysicsString;

  })();

  interval = null;

  this.startUp = function() {
    var baseMotionState, baseRigidBody, baseRigidBodyCI, baseShape, baseTransform, collisionConfiguration, dispatcher, last, mainLoop, overlappingPairCache, solver;
    collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();
    dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration);
    overlappingPairCache = new Ammo.btDbvtBroadphase();
    solver = new Ammo.btSequentialImpulseConstraintSolver();
    this.dynamicsWorld = new Ammo.btDiscreteDynamicsWorld(dispatcher, overlappingPairCache, solver, collisionConfiguration);
    this.dynamicsWorld.setGravity(new Ammo.btVector3(0, -10, 0));
    baseShape = new Ammo.btCylinderShape(new Ammo.btVector3(6.0, 0.1, 6.0));
    baseTransform = new Ammo.btTransform();
    baseTransform.setIdentity();
    baseTransform.setOrigin(new Ammo.btVector3(0, 0, 0));
    baseMotionState = new Ammo.btDefaultMotionState(baseTransform);
    baseRigidBodyCI = new Ammo.btRigidBodyConstructionInfo(0, baseMotionState, baseShape, new Ammo.btVector3(0, 0, 0));
    baseRigidBody = new Ammo.btRigidBody(baseRigidBodyCI);
    this.dynamicsWorld.addRigidBody(baseRigidBody);
    this.white_string = new PhysicsString(8.0, 0.1, 20, {
      x: 2,
      y: 0.2,
      z: 2
    }, {
      x: -2,
      y: 0.2,
      z: -2
    }, this.dynamicsWorld);
    this.black_string = new PhysicsString(8.0, 0.1, 20, {
      x: -2,
      y: 0.2,
      z: 2
    }, {
      x: -4,
      y: 0.2,
      z: 2
    }, this.dynamicsWorld);
    last = Date.now();
    mainLoop = function() {
      var now;
      now = Date.now();
      simulate(now - last);
      return last = now;
    };
    if (interval) {
      clearInterval(interval);
    }
    return interval = setInterval(mainLoop, 1000 / 60);
  };

  this.moveBody = function(body, pos) {
    var data, ms, trans;
    trans = new Ammo.btTransform();
    ms = new Ammo.btDefaultMotionState();
    body.getMotionState(ms);
    ms.getWorldTransform(trans);
    trans.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
    body.setActivationState(4);
    ms.setWorldTransform(trans);
    body.setMotionState(ms);
    data = {
      black: {
        segments: []
      },
      white: {
        segments: []
      }
    };
    data.white.segments = this.white_string.update();
    data.black.segments = this.black_string.update();
    return postMessage({
      cmd: 'physics',
      data: data
    });
  };

  this.simulate = function(dt) {
    var data;
    dt = dt || 1;
    this.dynamicsWorld.stepSimulation(dt, 2);
    data = {
      black: {
        segments: []
      },
      white: {
        segments: []
      }
    };
    data.white.segments = this.white_string.update();
    data.black.segments = this.black_string.update();
    return postMessage({
      cmd: 'physics',
      data: data
    });
  };

  this.onmessage = function(event) {
    switch (event.data.cmd) {
      case "startup":
        return startUp();
      case "white_start_move":
        return moveBody(white_string.start, event.data.data);
      case "white_end_move":
        return moveBody(white_string.end, event.data.data);
      case "black_start_move":
        return moveBody(black_string.start, event.data.data);
      case "black_end_move":
        return moveBody(black_string.end, event.data.data);
      default:
        return postMessage(event.data.cmd);
    }
  };

}).call(this);
