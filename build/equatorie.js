// Generated by CoffeeScript 1.6.3
/*
                       __  .__              ________ 
   ______ ____   _____/  |_|__| ____   ____/   __   \
  /  ___// __ \_/ ___\   __\  |/  _ \ /    \____    /
  \___ \\  ___/\  \___|  | |  (  <_> )   |  \ /    / 
 /____  >\___  >\___  >__| |__|\____/|___|  //____/  .co.uk
      \/     \/     \/                    \/         
                                              CoffeeGL
                                              Benjamin Blundell - ben@section9.co.uk
                                              http://www.section9.co.uk
*/


(function() {
  var Equatorie, EquatorieInteract, EquatorieString, EquatorieSystem, cgl, eq, f, loadAssets,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  EquatorieSystem = require('./system').EquatorieSystem;

  EquatorieString = require('./string').EquatorieString;

  loadAssets = require('./load').loadAssets;

  EquatorieInteract = require('./interact').EquatorieInteract;

  Equatorie = (function() {
    function Equatorie() {
      this.draw = __bind(this.draw, this);
      this.onPhysicsEvent = __bind(this.onPhysicsEvent, this);
      this.update = __bind(this.update, this);
      this.init = __bind(this.init, this);
    }

    Equatorie.prototype.init = function() {
      var cube, cube2, date, f,
        _this = this;
      this.top_node = new CoffeeGL.Node();
      this.string_height = 0.4;
      this.pickable = new CoffeeGL.Node();
      this.fbo_picking = new CoffeeGL.Fbo();
      this.ray = new CoffeeGL.Vec3(0, 0, 0);
      this.advance_date = 0;
      this.basic_nodes = new CoffeeGL.Node();
      this.mp = new CoffeeGL.Vec2(-1, -1);
      this.system = new EquatorieSystem();
      this.ready = false;
      this.loaded = new CoffeeGL.Signal();
      this.load_progress = new CoffeeGL.Signal();
      if (typeof window !== "undefined" && window !== null) {
        window.EquatorieLoaded = this.loaded;
      }
      if (typeof window !== "undefined" && window !== null) {
        window.EquatorieLoadProgress = this.load_progress;
      }
      this.system._calculateDate(new Date("January 1, 1393 00:00:00"));
      this.system._setPlanet("mars");
      this.system._calculateDeferentAngle();
      console.log(this.system._calculateDeferentPosition());
      this.system._setPlanet("venus");
      this.system._calculateDeferentAngle();
      console.log(this.system._calculateDeferentPosition());
      this.system._setPlanet("jupiter");
      this.system._calculateDeferentAngle();
      console.log(this.system._calculateDeferentPosition());
      this.system._setPlanet("saturn");
      this.system._calculateDeferentAngle();
      console.log(this.system._calculateDeferentPosition());
      this.system._setPlanet("mercury");
      this.system._calculateDeferentAngle();
      this.system._calculateDeferentPosition();
      console.log(this.system.state.deferentPosition);
      this.system.reset();
      f = function() {
        var q;
        console.log("Loaded Assets");
        _this.top_node.add(_this.basic_nodes);
        _this.basic_nodes.shader = _this.shader_basic;
        _this.marker.shader = _this.shader_basic;
        _this.top_node.add(_this.equatorie_model);
        _this.base = _this.equatorie_model.children[4];
        _this.epicycle = _this.equatorie_model.children[1];
        _this.pointer = _this.equatorie_model.children[0];
        _this.rim = _this.equatorie_model.children[3];
        _this.plate = _this.equatorie_model.children[2];
        _this.shiny = new CoffeeGL.Node();
        _this.equatorie_model.add(_this.shiny);
        _this.equatorie_model.remove(_this.epicycle);
        _this.equatorie_model.remove(_this.pointer);
        _this.equatorie_model.remove(_this.rim);
        _this.equatorie_model.remove(_this.plate);
        _this.equatorie_model.remove(_this.base);
        _this._setTangents(_this.pointer.geometry);
        _this._setTangents(_this.epicycle.geometry);
        _this._setTangents(_this.rim.geometry);
        _this._setTangents(_this.plate.geometry);
        _this._setTangents(_this.base.geometry);
        _this.shiny.shader = _this.shader_aniso;
        _this.shiny.add(_this.epicycle);
        _this.shiny.add(_this.rim);
        _this.shiny.add(_this.plate);
        _this.shiny.add(_this.base);
        _this.pointer.add(_this.pointer_normal);
        _this.rim.add(_this.rim_normal);
        _this.plate.add(_this.plate_normal);
        _this.epicycle.add(_this.epicycle_normal);
        _this.base.add(_this.base_normal);
        _this.shiny.uSamplerNormal = 1;
        _this.base.uAmbientLightingColor = new CoffeeGL.Colour.RGBA(1.0, 1.0, 0.8, 1.0);
        _this.base.uSpecColour = new CoffeeGL.Colour.RGBA(0.5, 0.5, 0.5, 1.0);
        _this.base.uAlphaX = 0.05;
        _this.base.uAlphaY = 0.05;
        _this.epicycle.uAmbientLightingColor = new CoffeeGL.Colour.RGBA(0.1, 0.1, 0.1, 1.0);
        _this.epicycle.uSpecColour = new CoffeeGL.Colour.RGBA(1.0, 0.9, 0.8, 1.0);
        _this.epicycle.uAlphaX = 0.4;
        _this.epicycle.uAlphaY = 0.28;
        _this.pointer.uAmbientLightingColor = new CoffeeGL.Colour.RGBA(0.1, 0.1, 0.1, 1.0);
        _this.pointer.uSpecColour = new CoffeeGL.Colour.RGBA(1.0, 0.9, 0.9, 1.0);
        _this.pointer.uAlphaX = 0.2;
        _this.pointer.uAlphaY = 0.1;
        _this.epicycle.uPickingColour = new CoffeeGL.Colour.RGBA(1.0, 1.0, 0.0, 1.0);
        _this.pointer.uPickingColour = new CoffeeGL.Colour.RGBA(0.0, 1.0, 1.0, 1.0);
        _this.pickable.add(_this.epicycle);
        _this.equatorie_model.remove(_this.pointer);
        _this.epicycle.add(_this.pointer);
        q = new CoffeeGL.Quaternion();
        q.fromAxisAngle(new CoffeeGL.Vec3(0, 1, 0), CoffeeGL.degToRad(-90.0));
        _this.base.matrix.mult(q.getMatrix4());
        _this.pickable.shader = _this.shader_picker;
        _this.top_node.add(_this.basic_nodes);
        _this.basic_nodes.shader = _this.shader_basic;
        _this.marker.shader = _this.shader_basic;
        _this.physics = new Worker('/js/physics.js');
        _this.physics.onmessage = _this.onPhysicsEvent;
        _this.physics.postMessage({
          cmd: "startup"
        });
        _this.interact = new EquatorieInteract(_this.system, _this.physics, _this.c, _this.white_start, _this.white_end, _this.black_start, _this.black_end, _this.epicycle, _this.pointer, _this.marker, _this.string_height);
        if (typeof window !== "undefined" && window !== null) {
          window.Equatorie = eq.interact;
        }
        CoffeeGL.Context.mouseDown.add(_this.interact.onMouseDown, _this.interact);
        CoffeeGL.Context.mouseOver.add(_this.interact.onMouseOver, _this.interact);
        CoffeeGL.Context.mouseOut.add(_this.interact.onMouseOut, _this.interact);
        CoffeeGL.Context.mouseMove.add(_this.interact.onMouseMove, _this.interact);
        CoffeeGL.Context.mouseUp.add(_this.interact.onMouseUp, _this.interact);
        CoffeeGL.Context.mouseOver.add(_this.onMouseOver, _this);
        CoffeeGL.Context.mouseOut.add(_this.onMouseOut, _this);
        CoffeeGL.Context.mouseMove.add(_this.onMouseMove, _this);
        CoffeeGL.Context.mouseMove.del(_this.c.onMouseMove, _this.c);
        CoffeeGL.Context.mouseDown.del(_this.c.onMouseDown, _this.c);
        return _this.ready = true;
      };
      this.loaded.addOnce(f, this);
      loadAssets(this, this.loaded, this.load_progress);
      date = new Date();
      cube = new CoffeeGL.Shapes.Cuboid(new CoffeeGL.Vec3(0.2, 0.2, 0.2));
      cube2 = new CoffeeGL.Shapes.Cuboid(new CoffeeGL.Vec3(0.01, 0.5, 0.01));
      this.marker = new CoffeeGL.Node(cube2);
      this.marker.uColour = new CoffeeGL.Colour.RGBA(0.0, 1.0, 1.0, 1.0);
      this.top_node.add(this.marker);
      this.c = new CoffeeGL.Camera.TouchPerspCamera(new CoffeeGL.Vec3(0, 0, 25));
      this.top_node.add(this.c);
      this.pickable.add(this.c);
      this.light = new CoffeeGL.Light.PointLight(new CoffeeGL.Vec3(0.0, 5.0, 25.0), new CoffeeGL.Colour.RGB(1.0, 1.0, 1.0));
      this.light2 = new CoffeeGL.Light.PointLight(new CoffeeGL.Vec3(0.0, 15.0, 5.0), new CoffeeGL.Colour.RGB(1.0, 1.0, 1.0));
      this.top_node.add(this.light);
      this.top_node.add(this.light2);
      GL.enable(GL.CULL_FACE);
      GL.cullFace(GL.BACK);
      GL.enable(GL.DEPTH_TEST);
      this.white_string = new EquatorieString(10.0, 0.01, 20);
      this.black_string = new EquatorieString(10.0, 0.01, 20);
      this.white_start = new CoffeeGL.Node(cube);
      this.pickable.add(this.white_start);
      this.white_start.matrix.translate(new CoffeeGL.Vec3(2, this.string_height, 2));
      this.white_start.uPickingColour = new CoffeeGL.Colour.RGBA(1.0, 0.0, 0.0, 1.0);
      this.white_end = new CoffeeGL.Node(cube);
      this.pickable.add(this.white_end);
      this.white_end.matrix.translate(new CoffeeGL.Vec3(-2, this.string_height, -2));
      this.white_end.uPickingColour = new CoffeeGL.Colour.RGBA(0.0, 1.0, 0.0, 1.0);
      this.black_start = new CoffeeGL.Node(cube);
      this.pickable.add(this.black_start);
      this.black_start.matrix.translate(new CoffeeGL.Vec3(-2, this.string_height, 2));
      this.black_start.uPickingColour = new CoffeeGL.Colour.RGBA(0.0, 0.0, 1.0, 1.0);
      this.black_end = new CoffeeGL.Node(cube);
      this.pickable.add(this.black_end);
      this.black_end.matrix.translate(new CoffeeGL.Vec3(-4, this.string_height, 2));
      this.black_end.uPickingColour = new CoffeeGL.Colour.RGBA(1.0, 1.0, 1.0, 1.0);
      this.basic_nodes.add(this.white_string).add(this.black_string);
      this.basic_nodes.add(this.white_start).add(this.white_end);
      this.basic_nodes.add(this.black_start).add(this.black_end);
      this.white_string.uColour = new CoffeeGL.Colour.RGBA(0.9, 0.9, 0.9, 1.0);
      this.black_string.uColour = new CoffeeGL.Colour.RGBA(0.1, 0.1, 0.1, 1.0);
      this.white_start.uColour = new CoffeeGL.Colour.RGBA(0.9, 0.2, 0.2, 0.8);
      return this.white_end.uColour = new CoffeeGL.Colour.RGBA(0.9, 0.2, 0.2, 0.8);
    };

    Equatorie.prototype.update = function(dt) {
      var date, m;
      if (!this.ready) {
        return;
      }
      date = new Date();
      this.angle = dt * 0.001 * CoffeeGL.degToRad(20.0);
      if (this.angle >= CoffeeGL.PI * 2) {
        this.angle = 0;
      }
      m = new CoffeeGL.Quaternion();
      m.fromAxisAngle(new CoffeeGL.Vec3(0, 1, 0), this.angle);
      m.transVec3(this.light.pos);
      this.interact.update(dt);
      return this;
    };

    Equatorie.prototype.updatePhysics = function(data) {
      this.white_string.update(data.white);
      return this.black_string.update(data.black);
    };

    Equatorie.prototype.onPhysicsEvent = function(event) {
      switch (event.data.cmd) {
        case "physics":
          return this.updatePhysics(event.data.data);
        case "ping":
          return console.log("Physics Ping: " + event.data.data);
        default:
          break;
      }
    };

    Equatorie.prototype.draw = function() {
      var pixel;
      GL.clearColor(0.15, 0.15, 0.15, 1.0);
      GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);
      this.c.update(CoffeeGL.Context.width, CoffeeGL.Context.height);
      if (!this.ready) {
        return;
      }
      if (this.top_node != null) {
        this.top_node.draw();
      }
      if (this.shader_picker != null) {
        this.fbo_picking.bind();
        this.fbo_picking.clear();
        this.shader_picker.bind();
        this.pickable.draw();
        if (this.mp.y !== -1 && this.mp.x !== -1) {
          pixel = new Uint8Array(4);
          GL.readPixels(this.mp.x, this.fbo_picking.height - this.mp.y, 1, 1, GL.RGBA, GL.UNSIGNED_BYTE, pixel);
          this.interact.checkPicked(pixel);
        }
        this.shader_picker.unbind();
        return this.fbo_picking.unbind();
      }
    };

    Equatorie.prototype.onMouseMove = function(event) {
      this.mp.x = event.mouseX;
      return this.mp.y = event.mouseY;
    };

    Equatorie.prototype.onMouseOver = function(event) {
      this.mp.x = event.mouseX;
      return this.mp.y = event.mouseY;
    };

    Equatorie.prototype.onMouseOut = function(event) {
      this.mp.x = -1;
      return this.mp.y = -1;
    };

    Equatorie.prototype.resize = function(w, h) {
      return this.fbo_picking.resize(w, h);
    };

    Equatorie.prototype._setTangents = function(geom) {
      var a, b, c, face, _i, _len, _ref, _ref1;
      _ref = geom.faces;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        face = _ref[_i];
        _ref1 = CoffeeGL.precomputeTangent(face.v[0].p, face.v[1].p, face.v[2].p, face.v[0].n, face.v[1].n, face.v[2].n, face.v[0].t, face.v[1].t, face.v[2].t), a = _ref1[0], b = _ref1[1], c = _ref1[2];
        face.v[0].tangent = a;
        face.v[1].tangent = b;
        face.v[2].tangent = c;
      }
      return this;
    };

    return Equatorie;

  })();

  eq = new Equatorie();

  cgl = new CoffeeGL.App('webgl-canvas', eq, eq.init, eq.draw, eq.update);

  f = function() {
    var h, w;
    w = $(window).width();
    h = $(window).height();
    $("#webgl-canvas").attr("width", w);
    $("#webgl-canvas").attr("height", h);
    $("#webgl-canvas").width(w);
    $("#webgl-canvas").height(h);
    cgl.resize(w, h);
    return eq.resize(w, h);
  };

  $(window).bind("resize", f);

  $(window).bind("ready", f);

}).call(this);
