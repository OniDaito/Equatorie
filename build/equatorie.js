// Generated by CoffeeScript 1.6.3
/*
                       __  .__              ________ 
   ______ ____   _____/  |_|__| ____   ____/   __   \
  /  ___// __ \_/ ___\   __\  |/  _ \ /    \____    /
  \___ \\  ___/\  \___|  | |  (  <_> )   |  \ /    / 
 /____  >\___  >\___  >__| |__|\____/|___|  //____/  .co.uk
      \/     \/     \/                    \/         
                                              CoffeeGL
                                              Benjamin Blundell - ben@section9.co.uk
                                              http://www.section9.co.uk

This software is released under Creative Commons Attribution Non-Commercial Share Alike
http://creativecommons.org/licenses/by-nc-sa/3.0/
*/


(function() {
  var Equatorie, EquatorieString, EquatorieSystem, cgl, eq,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  EquatorieSystem = require('./system').EquatorieSystem;

  EquatorieString = require('./string').EquatorieString;

  Equatorie = (function() {
    function Equatorie() {
      this.draw = __bind(this.draw, this);
      this.update = __bind(this.update, this);
      this.init = __bind(this.init, this);
    }

    Equatorie.prototype.init = function() {
      var baseMotionState, baseRigidBodyCI, baseShape, baseTransform, collisionConfiguration, controller, cube, dispatcher, g, overlappingPairCache, planets, r0, solver,
        _this = this;
      this.top_node = new CoffeeGL.Node();
      this.system = new EquatorieSystem();
      r0 = new CoffeeGL.Request('../shaders/basic.glsl');
      r0.get(function(data) {
        var r1;
        _this.shader_basic = new CoffeeGL.Shader(data, {
          "uColour": "uColour"
        });
        _this.white_string.shader = _this.shader_basic;
        _this.white_string.uColour = new CoffeeGL.Colour.RGBA(0.0, 1.0, 1.0, 1.0);
        _this.deferent.shader = _this.shader_basic;
        _this.deferent.uColour = new CoffeeGL.Colour.RGBA(1.0, 0.0, 0.0, 1.0);
        r1 = new CoffeeGL.Request('../shaders/basic_lighting.glsl');
        return r1.get(function(data) {
          var r2;
          _this.shader = new CoffeeGL.Shader(data, {
            "uAmbientLightingColor": "uAmbientLightingColor"
          });
          r2 = new CoffeeGL.Request('../models/equatorie.js');
          return r2.get(function(data) {
            var q;
            _this.g = new CoffeeGL.JSONModel(data);
            _this.top_node.add(_this.g);
            _this.pointer = _this.g.children[0];
            _this.epicycle = _this.g.children[1];
            _this.base = _this.g.children[2];
            _this.pointer.shader = _this.shader_basic;
            _this.epicycle.shader = _this.shader_basic;
            _this.base.shader = _this.shader;
            _this.base.uAmbientLightingColor = new CoffeeGL.Colour.RGBA(0.0, 1.0, 1.0, 1.0);
            _this.pointer.uColour = new CoffeeGL.Colour.RGBA(1.0, 1.0, 0.0, 1.0);
            _this.epicycle.uColour = new CoffeeGL.Colour.RGBA(0.6, 0.6, 0.0, 1.0);
            _this.g.remove(_this.pointer);
            _this.epicycle.add(_this.pointer);
            q = new CoffeeGL.Quaternion();
            q.fromAxisAngle(new CoffeeGL.Vec3(0, 1, 0), CoffeeGL.degToRad(-90.0));
            return _this.base.matrix.mult(q.getMatrix4());
          });
        });
      });
      cube = new CoffeeGL.Shapes.Cuboid(new CoffeeGL.Vec3(0.2, 0.2, 0.2));
      this.deferent = new CoffeeGL.Node(cube);
      this.top_node.add(this.deferent);
      this.c = new CoffeeGL.Camera.MousePerspCamera(new CoffeeGL.Vec3(0, 0, 25));
      this.top_node.add(this.c);
      this.light = new CoffeeGL.Light.PointLight(new CoffeeGL.Vec3(0.0, 5.0, 25.0), new CoffeeGL.Colour.RGB(1.0, 1.0, 1.0));
      this.light2 = new CoffeeGL.Light.PointLight(new CoffeeGL.Vec3(0.0, 15.0, 5.0), new CoffeeGL.Colour.RGB(1.0, 1.0, 1.0));
      this.top_node.add(this.light);
      this.top_node.add(this.light2);
      GL.enable(GL.CULL_FACE);
      GL.cullFace(GL.BACK);
      GL.enable(GL.DEPTH_TEST);
      g = new dat.GUI();
      g.remember(this);
      planets = ["mars", "venus", "jupiter", "saturn"];
      this.chosen_planet = "mars";
      controller = g.add(this.system, 'mean_argument', 0, 360);
      controller = g.add(this.system, 'mean_motus', 0, 360);
      controller = g.add(this, 'chosen_planet', planets);
      collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();
      dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration);
      overlappingPairCache = new Ammo.btDbvtBroadphase();
      solver = new Ammo.btSequentialImpulseConstraintSolver();
      this.dynamicsWorld = new Ammo.btDiscreteDynamicsWorld(dispatcher, overlappingPairCache, solver, collisionConfiguration);
      this.dynamicsWorld.setGravity(new Ammo.btVector3(0, -10, 0));
      baseShape = new Ammo.btCylinderShape(new Ammo.btVector3(6.0, 0.1, 6.0));
      baseTransform = new Ammo.btTransform();
      baseTransform.setIdentity();
      baseTransform.setOrigin(new Ammo.btVector3(0, 0, 0));
      baseMotionState = new Ammo.btDefaultMotionState(baseTransform);
      baseRigidBodyCI = new Ammo.btRigidBodyConstructionInfo(0, baseMotionState, baseShape, new Ammo.btVector3(0, 0, 0));
      this.baseRigidBody = new Ammo.btRigidBody(baseRigidBodyCI);
      this.dynamicsWorld.addRigidBody(this.baseRigidBody);
      this.white_string = new EquatorieString(8.0, 0.15, 20, new CoffeeGL.Vec3(2, 2, 2), new CoffeeGL.Vec3(-2, 2, 2), this.dynamicsWorld);
      this.top_node.add(this.white_string);
      return CoffeeGL.Context.mouseDown.add(this.onMouseDown, this);
    };

    Equatorie.prototype.update = function(dt) {
      var m, q, x, y, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.angle = dt * 0.001 * CoffeeGL.degToRad(20.0);
      if (this.angle >= CoffeeGL.PI * 2) {
        this.angle = 0;
      }
      m = new CoffeeGL.Quaternion();
      m.fromAxisAngle(new CoffeeGL.Vec3(0, 1, 0), this.angle);
      m.transVec3(this.light.pos);
      _ref = this.system.calculateDeferentPosition(this.chosen_planet), x = _ref[0], y = _ref[1];
      this.deferent.matrix.identity();
      this.deferent.matrix.translate(new CoffeeGL.Vec3(x, 0.2, y));
      _ref1 = this.system.calculateEpicyclePosition(this.chosen_planet), x = _ref1[0], y = _ref1[1];
      if ((_ref2 = this.epicycle) != null) {
        _ref2.matrix.identity();
      }
      if ((_ref3 = this.epicycle) != null) {
        _ref3.matrix.translate(new CoffeeGL.Vec3(x, 0, y));
      }
      if ((_ref4 = this.pointer) != null) {
        _ref4.matrix.identity();
      }
      q = new CoffeeGL.Quaternion();
      q.fromAxisAngle(new CoffeeGL.Vec3(0, 1, 0), CoffeeGL.degToRad(this.system.mean_argument));
      if ((_ref5 = this.pointer) != null) {
        _ref5.matrix.mult(q.getMatrix4());
      }
      this.white_string.update();
      this.dynamicsWorld.stepSimulation(dt / 1000.0, 5);
      return this;
    };

    Equatorie.prototype.onMouseDown = function(event) {};

    Equatorie.prototype.draw = function() {
      GL.clearColor(0.15, 0.15, 0.15, 1.0);
      GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);
      this.c.update();
      if (this.top_node != null) {
        return this.top_node.draw();
      }
    };

    return Equatorie;

  })();

  eq = new Equatorie();

  cgl = new CoffeeGL.App('webgl-canvas', eq, eq.init, eq.draw, eq.update);

}).call(this);
