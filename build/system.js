// Generated by CoffeeScript 1.6.3
(function() {
  var EquatorieSystem;

  EquatorieSystem = (function() {
    function EquatorieSystem() {
      this.base_radius = 6.0;
      this.epicycle_radius = 6.353;
      this.epicycle_thickness = this.epicycle_radius - this.base_radius;
      this.planet_data = {};
      this.planet_data.venus = {
        deferent_speed: 0.985,
        epicycle_speed: 0.616,
        epicycle_ratio: 0.72294,
        deferent_eccentricity: 0.0145,
        apogee_longitude: 98.1666667,
        mean_longitude: 279.7,
        mean_anomaly: 63.383
      };
      this.planet_data.mars = {
        deferent_speed: 0.524,
        epicycle_speed: 0.461,
        epicycle_ratio: 0.6563,
        deferent_eccentricity: 0.10284,
        apogee_longitude: 148.6166667,
        mean_longitude: 293.55,
        mean_anomaly: 346.15
      };
      this.planet_data.jupiter = {
        deferent_speed: 0.083,
        epicycle_speed: 0.902,
        epicycle_ratio: 0.1922,
        deferent_eccentricity: 0.04817,
        apogee_longitude: 188.9666667,
        mean_longitude: 238.16666667,
        mean_anomaly: 41.5333333
      };
      this.planet_data.saturn = {
        deferent_speed: 0.033,
        epicycle_speed: 0.952,
        epicycle_ratio: 0.10483,
        deferent_eccentricity: 0.05318,
        apogee_longitude: 148.6166667,
        mean_longitude: 266.25,
        mean_anomaly: 13.45
      };
    }

    EquatorieSystem.prototype.calculateDeferentAngle = function(planet) {
      return this.planet_data[planet].apogee_longitude;
    };

    EquatorieSystem.prototype.calculateDeferentPosition = function(planet) {
      var x, y;
      x = this.base_radius * this.planet_data[planet].deferent_eccentricity * Math.cos(CoffeeGL.degToRad(this.calculateDeferentAngle(planet)));
      y = this.base_radius * this.planet_data[planet].deferent_eccentricity * Math.sin(CoffeeGL.degToRad(this.calculateDeferentAngle(planet)));
      return [x, y];
    };

    EquatorieSystem.prototype.calculateEquantPosition = function(planet) {
      var x, y, _ref;
      _ref = this.calculateDeferentPosition(planet), x = _ref[0], y = _ref[1];
      return new CoffeeGL.Vec2(x * 2, y * 2);
    };

    EquatorieSystem.prototype.calculateDate = function(planet, date) {
      var epoch, passed;
      epoch = new Date("January 1, 1900 00:00:00");
      passed = Math.abs(date - epoch) / 86400000;
      return passed;
    };

    EquatorieSystem.prototype.calculateMeanMotus = function(planet, date) {
      var angle, passed;
      passed = this.calculateDate(planet, date);
      angle = this.planet_data[planet].mean_longitude + this.planet_data[planet].deferent_speed * passed % 360;
      return new CoffeeGL.Vec2(this.base_radius * Math.cos(CoffeeGL.degToRad(angle)), this.base_radius * Math.sin(CoffeeGL.degToRad(angle)));
    };

    EquatorieSystem.prototype.calculateParallel = function(planet, date) {
      var a, b, base_position, c, cr, d2, dangle, deferent_position, dir, discriminant, equant_position, f, motus_position, passed, r, sr, t, t1, t2, v;
      passed = this.calculateDate(planet, date);
      dangle = this.calculateDeferentAngle(planet);
      cr = Math.cos(CoffeeGL.degToRad(dangle));
      sr = Math.sin(CoffeeGL.degToRad(dangle));
      base_position = new CoffeeGL.Vec2(this.base_radius * cr, this.base_radius * sr);
      deferent_position = new CoffeeGL.Vec2(base_position.x * this.planet_data[planet].deferent_eccentricity, base_position.y * this.planet_data[planet].deferent_eccentricity);
      equant_position = this.calculateEquantPosition(planet);
      motus_position = this.calculateMeanMotus(planet, date);
      dir = motus_position.copy();
      dir.normalize();
      f = CoffeeGL.Vec2.sub(equant_position, deferent_position);
      r = this.base_radius;
      a = dir.dot(dir);
      b = 2 * f.dot(dir);
      c = f.dot(f) - r * r;
      v = new CoffeeGL.Vec2();
      discriminant = b * b - 4 * a * c;
      if (discriminant !== 0) {
        discriminant = Math.sqrt(discriminant);
        t1 = (-b - discriminant) / (2 * a);
        t2 = (-b + discriminant) / (2 * a);
        t = t2;
        if (t2 < 0) {
          t = t1;
        }
        v.copyFrom(equant_position);
        d2 = CoffeeGL.Vec2.multScalar(dir, t);
        v.add(d2);
        v.sub(deferent_position);
      }
      return v;
    };

    EquatorieSystem.prototype.calculateEpicyclePosition = function(planet, date) {
      var base_position, cr, dangle, deferent_position, equant_position, f0, f1, fangle, mangle, passed, sr, v;
      passed = this.calculateDate(planet, date);
      mangle = (this.planet_data[planet].mean_longitude + this.planet_data[planet].deferent_speed * passed) % 360;
      dangle = this.calculateDeferentAngle(planet);
      cr = Math.cos(CoffeeGL.degToRad(dangle));
      sr = Math.sin(CoffeeGL.degToRad(dangle));
      base_position = new CoffeeGL.Vec2(this.base_radius * cr, this.base_radius * sr);
      deferent_position = new CoffeeGL.Vec2(base_position.x * this.planet_data[planet].deferent_eccentricity, base_position.y * this.planet_data[planet].deferent_eccentricity);
      equant_position = this.calculateEquantPosition(planet);
      fangle = 0;
      v = this.calculateParallel(planet, date);
      if (v.x !== 0 && v.y !== 0) {
        f0 = CoffeeGL.radToDeg(Math.atan2(base_position.y - deferent_position.y, base_position.x - deferent_position.x));
        f1 = CoffeeGL.radToDeg(Math.atan2(v.y - deferent_position.y, v.x - deferent_position.x));
        fangle = f0 - f1;
      }
      return [deferent_position, base_position, v, dangle, fangle];
    };

    EquatorieSystem.prototype.calculatePointerAngle = function(planet, date) {
      var angle, passed;
      passed = this.calculateDate(planet, date);
      angle = this.planet_data[planet].mean_anomaly + this.planet_data[planet].epicycle_speed * passed % 360;
      return angle;
    };

    EquatorieSystem.prototype.calculatePointerPoint = function(planet, date) {
      var angle, base_position, dangle, deferent_position, dir, fangle, perp, v, _ref;
      angle = this.calculatePointerAngle(planet, date);
      _ref = this.calculateEpicyclePosition(planet, date), deferent_position = _ref[0], base_position = _ref[1], v = _ref[2], dangle = _ref[3], fangle = _ref[4];
      dir = CoffeeGL.Vec2.normalize(CoffeeGL.Vec2.sub(v, deferent_position));
      perp = dir.copy();
      perp.x = -dir.y;
      perp.y = dir.x;
      perp.multScalar(this.base_radius * this.planet_data[planet].epicycle_ratio);
      CoffeeGL.Vec2.add(perp, v);
      return v;
    };

    return EquatorieSystem;

  })();

  module.exports = {
    EquatorieSystem: EquatorieSystem
  };

}).call(this);
