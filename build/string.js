// Generated by CoffeeScript 1.6.3
(function() {
  var EquatorieString,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EquatorieString = (function(_super) {
    __extends(EquatorieString, _super);

    function EquatorieString(length, thickness, segments, world) {
      var base, body, c, colShape, i, localInertia, mass, motionState, pp, pq, rbInfo, seglength, segment_geom, segment_node, _i, _j, _ref, _ref1;
      EquatorieString.__super__.constructor.call(this);
      seglength = length / segments;
      segment_geom = new CoffeeGL.Shapes.Cylinder(thickness, 12, seglength);
      for (i = _i = 0, _ref = segments - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        colShape = new Ammo.btCylinderShape(new Ammo.btVector3(thickness / 2, seglength, thickness / 2));
        mass = 1.0;
        localInertia = new Ammo.btVector3(0, 0, 0);
        colShape.calculateLocalInertia(mass, localInertia);
        base = 5.0;
        motionState = new Ammo.btDefaultMotionState(new Ammo.btTransform(new Ammo.btQuaternion(0, 0, 0, 1), new Ammo.btVector3(0, base + seglength * i, 0)));
        rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, colShape, localInertia);
        body = new Ammo.btRigidBody(rbInfo);
        segment_node = new CoffeeGL.Node(segment_geom);
        segment_node.phys = body;
        this.add(segment_node);
        world.addRigidBody(body);
      }
      for (i = _j = 0, _ref1 = segments - 2; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        pp = new Ammo.btVector3(0, seglength / 2, 0);
        pq = new Ammo.btVector3(0, -seglength / 2, 0);
        c = new Ammo.btPoint2PointConstraint(this.children[i].phys, this.children[i + 1].phys, pp, pq);
        world.addConstraint(c, true);
      }
    }

    EquatorieString.prototype.update = function() {
      var segment, tmatrix, tq, trans, tv, _i, _len, _ref, _results;
      trans = new Ammo.btTransform();
      _ref = this.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        segment = _ref[_i];
        segment.matrix.identity();
        tq = new CoffeeGL.Quaternion();
        segment.phys.getMotionState().getWorldTransform(trans);
        tv = new CoffeeGL.Vec3(trans.getRotation().getAxis().x(), trans.getRotation().getAxis().y(), trans.getRotation().getAxis().z());
        tq.fromAxisAngle(tv, trans.getRotation().getAngle());
        tmatrix = tq.getMatrix4();
        tmatrix.setPos(new CoffeeGL.Vec3(trans.getOrigin().getX(), trans.getOrigin().getY(), trans.getOrigin().getZ()));
        _results.push(segment.matrix.copyFrom(tmatrix));
      }
      return _results;
    };

    return EquatorieString;

  })(CoffeeGL.Node);

  module.exports = {
    EquatorieString: EquatorieString
  };

}).call(this);
