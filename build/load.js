// Generated by CoffeeScript 1.6.3
(function() {
  var loadAssets, _loadAniso, _loadBasic, _loadLighting, _loadModel, _loadPicking,
    _this = this;

  _loadLighting = function(obj, c) {
    var r;
    r = new CoffeeGL.Request('../shaders/basic_lighting.glsl');
    return r.get(function(data) {
      obj.shader = new CoffeeGL.Shader(data, {
        "uAmbientLightingColor": "uAmbientLightingColor"
      });
      return c.test();
    });
  };

  _loadAniso = function(obj, c) {
    var r;
    r = new CoffeeGL.Request('../shaders/anisotropic.glsl');
    return r.get(function(data) {
      obj.shader_aniso = new CoffeeGL.Shader(data, {
        "uAmbientLightingColor": "uAmbientLightingColor",
        "uSpecColour": "uSpecColour",
        "uAlphaX": "uAlphaX",
        "uAlphaY": "uAlphaY"
      });
      return c.test();
    });
  };

  _loadModel = function(obj, c) {
    var r;
    r = new CoffeeGL.Request('../models/equatorie.js');
    return r.get(function(data) {
      obj.g = new CoffeeGL.JSONModel(data);
      return c.test();
    });
  };

  _loadBasic = function(obj, c) {
    var r;
    r = new CoffeeGL.Request('../shaders/basic.glsl');
    return r.get(function(data) {
      obj.shader_basic = new CoffeeGL.Shader(data, {
        "uColour": "uColour"
      });
      return c.test();
    });
  };

  _loadPicking = function(obj, c) {
    var r;
    r = new CoffeeGL.Request('../shaders/picking.glsl');
    return r.get(function(data) {
      obj.shader_picker = new CoffeeGL.Shader(data, {
        "uPickingColour": "uPickingColour"
      });
      return c.test();
    });
  };

  loadAssets = function(obj, signal) {
    var counter;
    counter = {};
    counter.test = function() {
      this.count--;
      if (this.count <= 0) {
        return this.signal.dispatch();
      }
    };
    _loadLighting(obj, counter);
    _loadModel(obj, counter);
    _loadBasic(obj, counter);
    _loadPicking(obj, counter);
    _loadAniso(obj, counter);
    counter.count = 5;
    counter.signal = signal;
    return this;
  };

  module.exports = {
    loadAssets: loadAssets
  };

}).call(this);
