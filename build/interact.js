// Generated by CoffeeScript 1.6.3
/*
                       __  .__              ________ 
   ______ ____   _____/  |_|__| ____   ____/   __   \
  /  ___// __ \_/ ___\   __\  |/  _ \ /    \____    /
  \___ \\  ___/\  \___|  | |  (  <_> )   |  \ /    / 
 /____  >\___  >\___  >__| |__|\____/|___|  //____/  .co.uk
      \/     \/     \/                    \/         
                                              CoffeeGL
                                              Benjamin Blundell - ben@section9.co.uk
                                              http://www.section9.co.uk
*/


(function() {
  var EquatorieInteract, EquatorieState,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  EquatorieState = (function() {
    function EquatorieState(name, func, duration) {
      this.name = name;
      this.func = func;
      this.duration = duration != null ? duration : 3;
      if (this.duration == null) {
        this.duration = 3.0;
      }
    }

    EquatorieState.prototype.update = function(dt) {
      return this.func(dt);
    };

    return EquatorieState;

  })();

  EquatorieInteract = (function() {
    function EquatorieInteract(system, physics, camera, white_start, white_end, black_start, black_end, epicycle, pointer, marker, string_height) {
      this.system = system;
      this.physics = physics;
      this.camera = camera;
      this.white_start = white_start;
      this.white_end = white_end;
      this.black_start = black_start;
      this.black_end = black_end;
      this.epicycle = epicycle;
      this.pointer = pointer;
      this.marker = marker;
      this.string_height = string_height;
      this._stateMoveBlackStringFinal = __bind(this._stateMoveBlackStringFinal, this);
      this._stateRotateLabel = __bind(this._stateRotateLabel, this);
      this._stateRotateEpicycle = __bind(this._stateRotateEpicycle, this);
      this._stateMoveEpicycle = __bind(this._stateMoveEpicycle, this);
      this._stateMoveWhiteThread = __bind(this._stateMoveWhiteThread, this);
      this._stateMoveBlackThread = __bind(this._stateMoveBlackThread, this);
      this._stateCalculateMeanMotus = __bind(this._stateCalculateMeanMotus, this);
      this._stateSetPlanetDate = __bind(this._stateSetPlanetDate, this);
      this.mp = new CoffeeGL.Vec2(-1, -1);
      this.mpp = new CoffeeGL.Vec2(-1, -1);
      this.mpd = new CoffeeGL.Vec2(0, 0);
      this.picked = false;
      this.picked_item = void 0;
      this.dragging = false;
      this.advance_date = 0;
      this.stack = [];
      this.stack_idx = 0;
      this._initGUI();
      this.time = {
        start: 0,
        dt: 0
      };
    }

    EquatorieInteract.prototype.update = function(dt) {
      var da;
      if (this.stack.length > 0) {
        if (this.time.dt / 1000 > this.stack[this.stack_idx].duration) {
          this.stack[this.stack_idx].update(1.0);
          return;
        } else if (this.time.dt < 0) {
          this.stack[this.stack_idx].update(0.0);
          return;
        } else {
          da = (this.time.dt / 1000) / this.stack[this.stack_idx].duration;
          this.stack[this.stack_idx].update(da);
          this.time.dt += dt;
        }
      }
      return this.time.start = new Date().getTime();
    };

    EquatorieInteract.prototype._stateSetPlanetDate = function(planet, date) {
      return this.system.solveForPlanetDate(planet, date);
    };

    EquatorieInteract.prototype._stateCalculateMeanMotus = function(dt) {
      return this;
    };

    EquatorieInteract.prototype._stateMoveBlackThread = function(dt) {
      var current_state, mv;
      current_state = this.stack[this.stack_idx];
      if (current_state.end_interp == null) {
        mv = this.system.state.meanMotusPosition;
        mv.normalize();
        mv.multScalar(10.0);
        current_state.end_interp = new CoffeeGL.Interpolation(this.black_end.matrix.getPos(), new CoffeeGL.Vec3(mv.x, this.string_height, mv.y));
      }
      if (current_state.start_interp == null) {
        current_state.start_interp = new CoffeeGL.Interpolation(this.black_start.matrix.getPos(), new CoffeeGL.Vec3(0, this.string_height, 0));
      }
      this.black_start.matrix.setPos(current_state.start_interp.set(dt));
      this.black_end.matrix.setPos(current_state.end_interp.set(dt));
      this.physics.postMessage({
        cmd: "black_start_move",
        data: this.black_start.matrix.getPos()
      });
      this.physics.postMessage({
        cmd: "black_end_move",
        data: this.black_end.matrix.getPos()
      });
      return this;
    };

    EquatorieInteract.prototype._stateMoveWhiteThread = function(dt) {
      var current_state, eq, pv;
      current_state = this.stack[this.stack_idx];
      if (current_state.end_interp == null) {
        eq = this.system.state.equantPosition;
        pv = this.system.state.parallelPosition;
        pv.sub(eq);
        pv.normalize();
        pv.multScalar(10.0);
        pv.add(eq);
        current_state.end_interp = new CoffeeGL.Interpolation(this.white_end.matrix.getPos(), new CoffeeGL.Vec3(pv.x, this.string_height, pv.y));
      }
      if (current_state.start_interp == null) {
        eq = this.system.state.equantPosition;
        current_state.start_interp = new CoffeeGL.Interpolation(this.white_start.matrix.getPos(), new CoffeeGL.Vec3(eq.x, this.string_height, eq.y));
      }
      this.white_start.matrix.setPos(current_state.start_interp.set(dt));
      this.white_end.matrix.setPos(current_state.end_interp.set(dt));
      this.physics.postMessage({
        cmd: "white_start_move",
        data: this.white_start.matrix.getPos()
      });
      return this.physics.postMessage({
        cmd: "white_end_move",
        data: this.white_end.matrix.getPos()
      });
    };

    EquatorieInteract.prototype._stateMoveEpicycle = function(dt) {
      var c, current_state, d, dr, e, v;
      current_state = this.stack[this.stack_idx];
      if (current_state.pos_interp == null) {
        d = this.system.state.deferentPosition;
        c = this.system.state.basePosition;
        v = this.system.state.parallelPosition;
        dr = this.system.state.deferentAngle;
        e = this.system.state.epicyclePrePosition;
        current_state.pos_interp = new CoffeeGL.Interpolation(this.epicycle.matrix.getPos(), new CoffeeGL.Vec3(e.x, 0, e.y));
      }
      this.epicycle.matrix.identity();
      return this.epicycle.matrix.translate(current_state.pos_interp.set(dt));
    };

    EquatorieInteract.prototype._stateRotateEpicycle = function(dt) {};

    EquatorieInteract.prototype._stateRotateLabel = function(dt) {
      var cp, pangle;
      pangle = this.system.state.pointerAngle;
      this.pointer.matrix.identity();
      this.pointer.matrix.rotate(new CoffeeGL.Vec3(0, 1, 0), CoffeeGL.degToRad(pangle));
      cp = this.system.state.pointerPoint;
      this.marker.matrix.identity();
      return this.marker.matrix.translate(new CoffeeGL.Vec3(cp.x, 0.6, cp.y));
    };

    EquatorieInteract.prototype._stateMoveBlackStringFinal = function(dt) {};

    EquatorieInteract.prototype.addStates = function(planet, date) {
      var _this = this;
      if (planet === 'mars' || planet === 'venus' || planet === 'jupiter' || planet === 'saturn') {
        this.stack = [];
        this.stack.push(new EquatorieState("Select Date and Planet", function() {
          return (function(planet, date) {
            return _this._stateSetPlanetDate(planet, date);
          })(planet, date);
        }));
        this.stack.push(new EquatorieState("Calculate Mean Motus", this._stateCalculateMeanMotus));
        this.stack.push(new EquatorieState("Move Black Thread", this._stateMoveBlackThread));
        this.stack.push(new EquatorieState("Move White Thread", this._stateMoveWhiteThread));
        this.stack.push(new EquatorieState("Move Epicycle", this._stateMoveEpicycle));
        return this.stack.push(new EquatorieState("Rotate Label", this._stateRotateLabel));
      }
    };

    EquatorieInteract.prototype.reset = function() {
      this.stack = [];
      return this.stack_idx = 0;
    };

    EquatorieInteract.prototype.solveForPlanet = function(planet, date) {
      var state, _i, _len, _ref, _results;
      this.stack = [];
      this.stack_idx = 0;
      this.addStates(planet, date);
      _ref = this.stack;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        state = _ref[_i];
        _results.push(state.update(1.0));
      }
      return _results;
    };

    EquatorieInteract.prototype.onMouseDown = function(event) {
      console.log(event);
      this.mp.x = event.mouseX;
      this.mp.y = event.mouseY;
      this.ray = this.camera.castRay(this.mp.x, this.mp.y);
      this.mdown = true;
      if (!this.picked) {
        return this.camera.onMouseDown(event);
      } else {
        return this.dragging = true;
      }
    };

    EquatorieInteract.prototype.onMouseMove = function(event) {
      var d, dd, np, p0, p1, tp, tray;
      this.mpp.x = this.mp.x;
      this.mpp.y = this.mp.y;
      this.mp.x = event.mouseX;
      this.mp.y = event.mouseY;
      this.mpd.x = this.mp.x - this.mpp.x;
      this.mpd.y = this.mp.y - this.mpp.y;
      if (this.dragging) {
        tray = this.camera.castRay(this.mp.x, this.mp.y);
        d = CoffeeGL.rayPlaneIntersect(new CoffeeGL.Vec3(0, this.string_height, 0), new CoffeeGL.Vec3(0, 1, 0), this.camera.pos, this.ray);
        dd = CoffeeGL.rayPlaneIntersect(new CoffeeGL.Vec3(0, this.string_height, 0), new CoffeeGL.Vec3(0, 1, 0), this.camera.pos, tray);
        p0 = tray.copy();
        p0.multScalar(dd);
        p0.add(this.camera.pos);
        p1 = this.ray.copy();
        p1.multScalar(d);
        p1.add(this.camera.pos);
        p0.y = this.string_height;
        p1.y = this.string_height;
        np = CoffeeGL.Vec3.sub(p0, p1);
        this.ray.copyFrom(tray);
        if (this.picked_item !== this.pointer) {
          tp = this.picked_item.matrix.getPos();
          this.picked_item.matrix.setPos(tp.add(np));
        }
        if (this.picked_item === this.white_start) {
          return this.physics.postMessage({
            cmd: "white_start_move",
            data: this.picked_item.matrix.getPos()
          });
        } else if (this.picked_item === this.white_end) {
          return this.physics.postMessage({
            cmd: "white_end_move",
            data: this.picked_item.matrix.getPos()
          });
        } else if (this.picked_item === this.black_start) {
          return this.physics.postMessage({
            cmd: "black_start_move",
            data: this.picked_item.matrix.getPos()
          });
        } else if (this.picked_item === this.black_end) {
          return this.physics.postMessage({
            cmd: "black_end_move",
            data: this.picked_item.matrix.getPos()
          });
        }
      } else {
        return this.camera.onMouseMove(event);
      }
    };

    EquatorieInteract.prototype.checkPicked = function(p) {
      if (this.dragging) {
        return;
      }
      this.picked = false;
      if (p[0] === 255 && p[1] === 0 && p[2] === 0) {
        this.picked_item = this.white_start;
        return this.picked = true;
      } else if (p[0] === 0 && p[1] === 255 && p[2] === 0) {
        this.picked_item = this.white_end;
        return this.picked = true;
      } else if (p[0] === 0 && p[1] === 0 && p[2] === 255) {
        this.picked_item = this.black_start;
        return this.picked = true;
      } else if (p[0] === 255 && p[1] === 255 && p[2] === 255) {
        this.picked_item = this.black_end;
        return this.picked = true;
      } else if (p[0] === 255 && p[1] === 255 && p[2] === 0) {
        this.picked_item = this.epicycle;
        return this.picked = true;
      } else if (p[0] === 0 && p[1] === 255 && p[2] === 255) {
        this.picked_item = this.pointer;
        return this.picked = true;
      }
    };

    EquatorieInteract.prototype._initGUI = function() {
      var controller, planets,
        _this = this;
      this.datgui = new dat.GUI();
      this.datgui.remember(this);
      planets = ["mars", "venus", "jupiter", "saturn"];
      this.chosen_planet = "mars";
      controller = this.datgui.add(this, 'chosen_planet', planets);
      controller = this.datgui.add(this, 'solveForCurrentDatePlanet');
      controller = this.datgui.add(this, 'advance_date', 0, 730);
      controller.onChange(function(value) {
        return _this.solveForCurrentDatePlanet();
      });
      controller = this.datgui.add(this, "stepForward");
      controller = this.datgui.add(this.pointer, 'uAlphaX', 0, 1);
      controller = this.datgui.add(this.pointer, 'uAlphaY', 0, 1);
      controller = this.datgui.add(this.epicycle, 'uAlphaX', 0, 1);
      return controller = this.datgui.add(this.epicycle, 'uAlphaY', 0, 1);
    };

    EquatorieInteract.prototype.solveForCurrentDatePlanet = function() {
      var date;
      date = new Date();
      date.setDate(date.getDate() + this.advance_date);
      return this.solveForPlanet(this.chosen_planet, date);
    };

    EquatorieInteract.prototype.stepForward = function() {
      this.time.start = new Date().getTime();
      if (this.stack.length === 0) {
        this.addStates(this.chosen_planet, new Date());
        return this.stack_idx = 0;
      } else {
        if (this.stack_idx + 1 < this.stack.length) {
          this.stack[this.stack_idx].update(1.0);
          this.time.dt = 0;
          return this.stack_idx += 1;
        }
      }
    };

    EquatorieInteract.prototype.onMouseOver = function(event) {
      this.mp.x = event.mouseX;
      return this.mp.y = event.mouseY;
    };

    EquatorieInteract.prototype.onMouseUp = function(event) {
      this.mdown = false;
      this.picked = false;
      return this.dragging = false;
    };

    EquatorieInteract.prototype.onMouseOut = function(event) {
      this.mp.x = this.mpp.x = -1;
      this.mp.y = this.mpp.y = -1;
      this.mpd.x = this.mpd.y = 0;
      this.mdown = false;
      this.picked = false;
      return this.dragging = false;
    };

    return EquatorieInteract;

  })();

  module.exports = {
    EquatorieInteract: EquatorieInteract
  };

}).call(this);
