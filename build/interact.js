// Generated by CoffeeScript 1.6.3
/*
                       __  .__              ________ 
   ______ ____   _____/  |_|__| ____   ____/   __   \
  /  ___// __ \_/ ___\   __\  |/  _ \ /    \____    /
  \___ \\  ___/\  \___|  | |  (  <_> )   |  \ /    / 
 /____  >\___  >\___  >__| |__|\____/|___|  //____/  .co.uk
      \/     \/     \/                    \/         
                                              CoffeeGL
                                              Benjamin Blundell - ben@section9.co.uk
                                              http://www.section9.co.uk
*/


(function() {
  var EquatorieInteract;

  EquatorieInteract = (function() {
    function EquatorieInteract(system, physics, camera, white_start, white_end, black_start, black_end, epicycle, pointer, marker, string_height) {
      this.system = system;
      this.physics = physics;
      this.camera = camera;
      this.white_start = white_start;
      this.white_end = white_end;
      this.black_start = black_start;
      this.black_end = black_end;
      this.epicycle = epicycle;
      this.pointer = pointer;
      this.marker = marker;
      this.string_height = string_height;
      this.mp = new CoffeeGL.Vec2(-1, -1);
      this.mpp = new CoffeeGL.Vec2(-1, -1);
      this.mpd = new CoffeeGL.Vec2(0, 0);
      this.picked = false;
      this.picked_item = void 0;
      this.dragging = false;
      this.advance_date = 0;
      this._initGUI();
    }

    EquatorieInteract.prototype.update = function(dt) {};

    EquatorieInteract.prototype.solveForPlanet = function(planet, date) {
      var c, cp, d, dr, eq, ma, mr, mv, pangle, pv, tmatrix, v, _ref, _ref1;
      console.log(this.system.calculateDeferentAngle(planet, date));
      _ref = this.system.calculateMeanMotus(planet, date), ma = _ref[0], mv = _ref[1];
      console.log("Mean Motus: " + ma);
      console.log("Days Passed: " + this.system.calculateDate(date));
      mv.normalize();
      mv.multScalar(10.0);
      this.black_start.matrix.identity();
      this.black_start.matrix.translate(new CoffeeGL.Vec3(0, this.string_height, 0));
      this.black_end.matrix.identity();
      this.black_end.matrix.translate(new CoffeeGL.Vec3(mv.x, this.string_height, mv.y));
      this.physics.postMessage({
        cmd: "black_start_move",
        data: this.black_start.matrix.getPos()
      });
      this.physics.postMessage({
        cmd: "black_end_move",
        data: this.black_end.matrix.getPos()
      });
      eq = this.system.calculateEquantPosition(planet, date);
      pv = this.system.calculateParallel(planet, date);
      pv.sub(eq);
      pv.normalize();
      pv.multScalar(10.0);
      pv.add(eq);
      this.white_start.matrix.identity();
      this.white_start.matrix.translate(new CoffeeGL.Vec3(eq.x, this.string_height, eq.y));
      this.white_end.matrix.identity();
      this.white_end.matrix.translate(new CoffeeGL.Vec3(pv.x, this.string_height, pv.y));
      this.physics.postMessage({
        cmd: "white_start_move",
        data: this.white_start.matrix.getPos()
      });
      this.physics.postMessage({
        cmd: "white_end_move",
        data: this.white_end.matrix.getPos()
      });
      if (this.epicycle != null) {
        _ref1 = this.system.calculateEpicyclePosition(planet, date), d = _ref1[0], c = _ref1[1], v = _ref1[2], dr = _ref1[3], mr = _ref1[4];
        this.epicycle.matrix.identity();
        this.epicycle.matrix.translate(new CoffeeGL.Vec3(c.x, 0, c.y));
        this.epicycle.matrix.rotate(new CoffeeGL.Vec3(0, 1, 0), CoffeeGL.degToRad(90 - dr));
        tmatrix = new CoffeeGL.Matrix4();
        tmatrix.translate(new CoffeeGL.Vec3(d.x, 0, d.y));
        tmatrix.rotate(new CoffeeGL.Vec3(0, 1, 0), CoffeeGL.degToRad(mr));
        tmatrix.mult(this.epicycle.matrix);
        this.epicycle.matrix.copyFrom(tmatrix);
      }
      pangle = this.system.calculatePointerAngle(planet, date);
      this.pointer.matrix.identity();
      this.pointer.matrix.rotate(new CoffeeGL.Vec3(0, 1, 0), CoffeeGL.degToRad(pangle));
      cp = this.system.calculatePointerPoint(planet, date);
      this.marker.matrix.identity();
      this.marker.matrix.translate(new CoffeeGL.Vec3(cp.x, 0.6, cp.y));
      return this.system.calculateTruePlace(planet, date);
    };

    EquatorieInteract.prototype.onMouseDown = function(event) {
      console.log(event);
      this.mp.x = event.mouseX;
      this.mp.y = event.mouseY;
      this.ray = this.camera.castRay(this.mp.x, this.mp.y);
      this.mdown = true;
      if (!this.picked) {
        return this.camera.onMouseDown(event);
      } else {
        return this.dragging = true;
      }
    };

    EquatorieInteract.prototype.onMouseMove = function(event) {
      var d, dd, np, p0, p1, tp, tray;
      this.mpp.x = this.mp.x;
      this.mpp.y = this.mp.y;
      this.mp.x = event.mouseX;
      this.mp.y = event.mouseY;
      this.mpd.x = this.mp.x - this.mpp.x;
      this.mpd.y = this.mp.y - this.mpp.y;
      if (this.dragging) {
        tray = this.camera.castRay(this.mp.x, this.mp.y);
        d = CoffeeGL.rayPlaneIntersect(new CoffeeGL.Vec3(0, this.string_height, 0), new CoffeeGL.Vec3(0, 1, 0), this.camera.pos, this.ray);
        dd = CoffeeGL.rayPlaneIntersect(new CoffeeGL.Vec3(0, this.string_height, 0), new CoffeeGL.Vec3(0, 1, 0), this.camera.pos, tray);
        p0 = tray.copy();
        p0.multScalar(dd);
        p0.add(this.camera.pos);
        p1 = this.ray.copy();
        p1.multScalar(d);
        p1.add(this.camera.pos);
        p0.y = this.string_height;
        p1.y = this.string_height;
        np = CoffeeGL.Vec3.sub(p0, p1);
        this.ray.copyFrom(tray);
        if (this.picked_item !== this.pointer) {
          tp = this.picked_item.matrix.getPos();
          this.picked_item.matrix.setPos(tp.add(np));
        }
        if (this.picked_item === this.white_start) {
          return this.physics.postMessage({
            cmd: "white_start_move",
            data: this.picked_item.matrix.getPos()
          });
        } else if (this.picked_item === this.white_end) {
          return this.physics.postMessage({
            cmd: "white_end_move",
            data: this.picked_item.matrix.getPos()
          });
        } else if (this.picked_item === this.black_start) {
          return this.physics.postMessage({
            cmd: "black_start_move",
            data: this.picked_item.matrix.getPos()
          });
        } else if (this.picked_item === this.black_end) {
          return this.physics.postMessage({
            cmd: "black_end_move",
            data: this.picked_item.matrix.getPos()
          });
        }
      } else {
        return this.camera.onMouseMove(event);
      }
    };

    EquatorieInteract.prototype.checkPicked = function(p) {
      if (this.dragging) {
        return;
      }
      this.picked = false;
      if (p[0] === 255 && p[1] === 0 && p[2] === 0) {
        this.picked_item = this.white_start;
        return this.picked = true;
      } else if (p[0] === 0 && p[1] === 255 && p[2] === 0) {
        this.picked_item = this.white_end;
        return this.picked = true;
      } else if (p[0] === 0 && p[1] === 0 && p[2] === 255) {
        this.picked_item = this.black_start;
        return this.picked = true;
      } else if (p[0] === 255 && p[1] === 255 && p[2] === 255) {
        this.picked_item = this.black_end;
        return this.picked = true;
      } else if (p[0] === 255 && p[1] === 255 && p[2] === 0) {
        this.picked_item = this.epicycle;
        return this.picked = true;
      } else if (p[0] === 0 && p[1] === 255 && p[2] === 255) {
        this.picked_item = this.pointer;
        return this.picked = true;
      }
    };

    EquatorieInteract.prototype._initGUI = function() {
      var controller, planets,
        _this = this;
      this.datgui = new dat.GUI();
      this.datgui.remember(this);
      planets = ["mars", "venus", "jupiter", "saturn"];
      this.chosen_planet = "mars";
      controller = this.datgui.add(this, 'chosen_planet', planets);
      controller = this.datgui.add(this, 'solveForCurrentDatePlanet');
      controller = this.datgui.add(this, 'advance_date', 0, 730);
      controller.onChange(function(value) {
        return _this.solveForCurrentDatePlanet();
      });
      controller = this.datgui.add(this.pointer, 'uAlphaX', 0, 1);
      controller = this.datgui.add(this.pointer, 'uAlphaY', 0, 1);
      controller = this.datgui.add(this.epicycle, 'uAlphaX', 0, 1);
      return controller = this.datgui.add(this.epicycle, 'uAlphaY', 0, 1);
    };

    EquatorieInteract.prototype.solveForCurrentDatePlanet = function() {
      var date;
      date = new Date();
      date.setDate(date.getDate() + this.advance_date);
      return this.solveForPlanet(this.chosen_planet, date);
    };

    EquatorieInteract.prototype.onMouseOver = function(event) {
      this.mp.x = event.mouseX;
      return this.mp.y = event.mouseY;
    };

    EquatorieInteract.prototype.onMouseUp = function(event) {
      this.mdown = false;
      this.picked = false;
      return this.dragging = false;
    };

    EquatorieInteract.prototype.onMouseOut = function(event) {
      this.mp.x = this.mpp.x = -1;
      this.mp.y = this.mpp.y = -1;
      this.mpd.x = this.mpd.y = 0;
      this.mdown = false;
      this.picked = false;
      return this.dragging = false;
    };

    return EquatorieInteract;

  })();

  module.exports = {
    EquatorieInteract: EquatorieInteract
  };

}).call(this);
